/**
 * Autogenerated by Scrooge
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.scrooge.test.gold.thriftandroid;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class Request implements TBase<Request, Request._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Request");

  private static final TField A_LIST_FIELD_DESC = new TField("aList", TType.LIST, (short)1);
  private static final TField A_SET_FIELD_DESC = new TField("aSet", TType.SET, (short)2);
  private static final TField A_MAP_FIELD_DESC = new TField("aMap", TType.MAP, (short)3);
  private static final TField A_REQUEST_FIELD_DESC = new TField("aRequest", TType.STRUCT, (short)4);
  private static final TField SUB_REQUESTS_FIELD_DESC = new TField("subRequests", TType.LIST, (short)5);
  private static final TField HAS_DEFAULT_FIELD_DESC = new TField("hasDefault", TType.STRING, (short)6);
  private static final TField NO_COMMENT_FIELD_DESC = new TField("noComment", TType.I64, (short)7);
  private static final TField DOUBLE_SLASH_COMMENT_FIELD_DESC = new TField("doubleSlashComment", TType.I64, (short)8);
  private static final TField HASHTAG_COMMENT_FIELD_DESC = new TField("hashtagComment", TType.I64, (short)9);
  private static final TField SINGLE_ASTERISK_COMMENT_FIELD_DESC = new TField("singleAsteriskComment", TType.I64, (short)10);
  private static final TField DOC_STRING_COMMENT_FIELD_DESC = new TField("docStringComment", TType.I64, (short)11);
  private static final TField REC_REQUEST_FIELD_DESC = new TField("recRequest", TType.STRUCT, (short)12);
  private static final TField REQUIRED_FIELD_FIELD_DESC = new TField("requiredField", TType.STRING, (short)13);
  private static final TField CONSTRUCTION_REQUIRED_FIELD_FIELD_DESC = new TField("constructionRequiredField", TType.I64, (short)14);
  private static final TField AN_INT8_FIELD_DESC = new TField("anInt8", TType.BYTE, (short)15);


  private List<String> aList;
  private Set<Integer> aSet;
  private Map<Long,Long> aMap;
  private Request aRequest;
  private List<Request> subRequests;
  private String hasDefault;
  private long noComment;
  private long doubleSlashComment;
  private long hashtagComment;
  private long singleAsteriskComment;
  private long docStringComment;
  private Recursive recRequest;
  private String requiredField;
  private long constructionRequiredField;
  private byte anInt8;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    A_LIST((short)1, "aList"),
    A_SET((short)2, "aSet"),
    A_MAP((short)3, "aMap"),
    A_REQUEST((short)4, "aRequest"),
    SUB_REQUESTS((short)5, "subRequests"),
    HAS_DEFAULT((short)6, "hasDefault"),
    NO_COMMENT((short)7, "noComment"),
    DOUBLE_SLASH_COMMENT((short)8, "doubleSlashComment"),
    HASHTAG_COMMENT((short)9, "hashtagComment"),
    SINGLE_ASTERISK_COMMENT((short)10, "singleAsteriskComment"),
    DOC_STRING_COMMENT((short)11, "docStringComment"),
    REC_REQUEST((short)12, "recRequest"),
    REQUIRED_FIELD((short)13, "requiredField"),
    CONSTRUCTION_REQUIRED_FIELD((short)14, "constructionRequiredField"),
    AN_INT8((short)15, "anInt8");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A_LIST
          return A_LIST;
        case 2: // A_SET
          return A_SET;
        case 3: // A_MAP
          return A_MAP;
        case 4: // A_REQUEST
          return A_REQUEST;
        case 5: // SUB_REQUESTS
          return SUB_REQUESTS;
        case 6: // HAS_DEFAULT
          return HAS_DEFAULT;
        case 7: // NO_COMMENT
          return NO_COMMENT;
        case 8: // DOUBLE_SLASH_COMMENT
          return DOUBLE_SLASH_COMMENT;
        case 9: // HASHTAG_COMMENT
          return HASHTAG_COMMENT;
        case 10: // SINGLE_ASTERISK_COMMENT
          return SINGLE_ASTERISK_COMMENT;
        case 11: // DOC_STRING_COMMENT
          return DOC_STRING_COMMENT;
        case 12: // REC_REQUEST
          return REC_REQUEST;
        case 13: // REQUIRED_FIELD
          return REQUIRED_FIELD;
        case 14: // CONSTRUCTION_REQUIRED_FIELD
          return CONSTRUCTION_REQUIRED_FIELD;
        case 15: // AN_INT8
          return AN_INT8;
        default:
          return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __NOCOMMENT_ISSET_ID = 0;
  private static final int __DOUBLESLASHCOMMENT_ISSET_ID = 1;
  private static final int __HASHTAGCOMMENT_ISSET_ID = 2;
  private static final int __SINGLEASTERISKCOMMENT_ISSET_ID = 3;
  private static final int __DOCSTRINGCOMMENT_ISSET_ID = 4;
  private static final int __CONSTRUCTIONREQUIREDFIELD_ISSET_ID = 5;
  private static final int __ANINT8_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A_LIST, new FieldMetaData("aList", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.A_SET, new FieldMetaData("aSet", TFieldRequirementType.DEFAULT,
      new SetMetaData(TType.SET,
                new FieldValueMetaData(TType.I32))));
    tmpMap.put(_Fields.A_MAP, new FieldMetaData("aMap", TFieldRequirementType.DEFAULT,
      new MapMetaData(TType.MAP,
            new FieldValueMetaData(TType.I64),
            new FieldValueMetaData(TType.I64))));
    tmpMap.put(_Fields.A_REQUEST, new FieldMetaData("aRequest", TFieldRequirementType.OPTIONAL,
      new StructMetaData(TType.STRUCT, Request.class)));
    tmpMap.put(_Fields.SUB_REQUESTS, new FieldMetaData("subRequests", TFieldRequirementType.DEFAULT,
      new ListMetaData(TType.LIST,
                new StructMetaData(TType.STRUCT, Request.class))));
    tmpMap.put(_Fields.HAS_DEFAULT, new FieldMetaData("hasDefault", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.NO_COMMENT, new FieldMetaData("noComment", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.DOUBLE_SLASH_COMMENT, new FieldMetaData("doubleSlashComment", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.HASHTAG_COMMENT, new FieldMetaData("hashtagComment", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.SINGLE_ASTERISK_COMMENT, new FieldMetaData("singleAsteriskComment", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.DOC_STRING_COMMENT, new FieldMetaData("docStringComment", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.REC_REQUEST, new FieldMetaData("recRequest", TFieldRequirementType.OPTIONAL,
      new StructMetaData(TType.STRUCT, Recursive.class)));
    tmpMap.put(_Fields.REQUIRED_FIELD, new FieldMetaData("requiredField", TFieldRequirementType.REQUIRED,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CONSTRUCTION_REQUIRED_FIELD, new FieldMetaData("constructionRequiredField", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.AN_INT8, new FieldMetaData("anInt8", TFieldRequirementType.OPTIONAL,
      new FieldValueMetaData(TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }


  public Request() {
    this.hasDefault = "the_default";
  }

  public Request(
      List<String> aList,
      Set<Integer> aSet,
      Map<Long,Long> aMap,
      Request aRequest,
      List<Request> subRequests,
      String hasDefault,
      Long noComment,
      Long doubleSlashComment,
      Long hashtagComment,
      Long singleAsteriskComment,
      Long docStringComment,
      Recursive recRequest,
      String requiredField,
      Long constructionRequiredField,
      Byte anInt8
  ) {
    this();
    if(aList != null) {
      this.aList = aList;
    }
    if(aSet != null) {
      this.aSet = aSet;
    }
    if(aMap != null) {
      this.aMap = aMap;
    }
    if(aRequest != null) {
      this.aRequest = aRequest;
    }
    if(subRequests != null) {
      this.subRequests = subRequests;
    }
    if(hasDefault != null) {
      this.hasDefault = hasDefault;
    }
    if(noComment != null) {
      this.noComment = noComment;
      __isset_bit_vector.set(__NOCOMMENT_ISSET_ID, true);

    }
    if(doubleSlashComment != null) {
      this.doubleSlashComment = doubleSlashComment;
      __isset_bit_vector.set(__DOUBLESLASHCOMMENT_ISSET_ID, true);

    }
    if(hashtagComment != null) {
      this.hashtagComment = hashtagComment;
      __isset_bit_vector.set(__HASHTAGCOMMENT_ISSET_ID, true);

    }
    if(singleAsteriskComment != null) {
      this.singleAsteriskComment = singleAsteriskComment;
      __isset_bit_vector.set(__SINGLEASTERISKCOMMENT_ISSET_ID, true);

    }
    if(docStringComment != null) {
      this.docStringComment = docStringComment;
      __isset_bit_vector.set(__DOCSTRINGCOMMENT_ISSET_ID, true);

    }
    if(recRequest != null) {
      this.recRequest = recRequest;
    }
    if(requiredField != null) {
      this.requiredField = requiredField;
    }
    if(constructionRequiredField != null) {
      this.constructionRequiredField = constructionRequiredField;
      __isset_bit_vector.set(__CONSTRUCTIONREQUIREDFIELD_ISSET_ID, true);

    }
    if(anInt8 != null) {
      this.anInt8 = anInt8;
      __isset_bit_vector.set(__ANINT8_ISSET_ID, true);

    }
  }


  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSet(_Fields.A_LIST)) {
      List<String> __this__aList = new ArrayList<String>();
      for (String other_element : other.aList) {
        __this__aList.add(other_element);
      }
      this.aList = __this__aList;
    }
    if (other.isSet(_Fields.A_SET)) {
      Set<Integer> __this__aSet = new HashSet<Integer>();
      for (Integer other_element : other.aSet) {
        __this__aSet.add(other_element);
      }
      this.aSet = __this__aSet;
    }
    if (other.isSet(_Fields.A_MAP)) {
      Map<Long,Long> __this__aMap = new HashMap<Long,Long>();
      for (Map.Entry<Long, Long> other_element : other.aMap.entrySet()) {
        Long other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();
        Long __this__aMap_copy_key = other_element_key;
        Long __this__aMap_copy_value = other_element_value;
        __this__aMap.put(__this__aMap_copy_key, __this__aMap_copy_value);
      }
      this.aMap = __this__aMap;
    }
    if (other.isSet(_Fields.A_REQUEST)) {
      this.aRequest = new Request(other.aRequest);
    }
    if (other.isSet(_Fields.SUB_REQUESTS)) {
      List<Request> __this__subRequests = new ArrayList<Request>();
      for (Request other_element : other.subRequests) {
        __this__subRequests.add(new Request(other_element));
      }
      this.subRequests = __this__subRequests;
    }
    if (other.isSet(_Fields.HAS_DEFAULT)) {
      this.hasDefault = other.hasDefault;
    }
    this.noComment = other.noComment;
    this.doubleSlashComment = other.doubleSlashComment;
    this.hashtagComment = other.hashtagComment;
    this.singleAsteriskComment = other.singleAsteriskComment;
    this.docStringComment = other.docStringComment;
    if (other.isSet(_Fields.REC_REQUEST)) {
      this.recRequest = new Recursive(other.recRequest);
    }
    if (other.isSet(_Fields.REQUIRED_FIELD)) {
      this.requiredField = other.requiredField;
    }
    this.constructionRequiredField = other.constructionRequiredField;
    this.anInt8 = other.anInt8;
  }

  public static List<String> validateNewInstance(Request item) {
    final List<String> buf = new ArrayList<String>();
    if (item.isSet(_Fields.A_REQUEST)) {
      Request _aRequest = item.aRequest;
      buf.addAll(com.twitter.scrooge.test.gold.thriftandroid.Request.validateNewInstance(_aRequest));
    }

    if (item.isSet(_Fields.SUB_REQUESTS)) {
      List<Request> _subRequests = item.subRequests;
      for (Request _subRequests_element : _subRequests) {
        buf.addAll(com.twitter.scrooge.test.gold.thriftandroid.Request.validateNewInstance(_subRequests_element));
      }
    }

    if (item.isSet(_Fields.REC_REQUEST)) {
      Recursive _recRequest = item.recRequest;
      buf.addAll(com.twitter.scrooge.test.gold.thriftandroid.Recursive.validateNewInstance(_recRequest));
    }

    if (!item.isSet(_Fields.REQUIRED_FIELD)) {
       buf.add("Required field 'requiredField' in type 'Request' was not present.");
    }

    if (!item.isSet(_Fields.CONSTRUCTION_REQUIRED_FIELD)) {
      buf.add("Construction required field 'constructionRequiredField' in type 'Request' was not present.");
    }

    return buf;
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @java.lang.Override
  public void clear() {
    this.aList = null;
    this.aSet = null;
    this.aMap = null;
    this.aRequest = null;
    this.subRequests = null;
    this.hasDefault = "the_default";
    __isset_bit_vector.set(__NOCOMMENT_ISSET_ID, false);
    this.noComment = 0;
    __isset_bit_vector.set(__DOUBLESLASHCOMMENT_ISSET_ID, false);
    this.doubleSlashComment = 0;
    __isset_bit_vector.set(__HASHTAGCOMMENT_ISSET_ID, false);
    this.hashtagComment = 0;
    __isset_bit_vector.set(__SINGLEASTERISKCOMMENT_ISSET_ID, false);
    this.singleAsteriskComment = 0;
    __isset_bit_vector.set(__DOCSTRINGCOMMENT_ISSET_ID, false);
    this.docStringComment = 0;
    this.recRequest = null;
    this.requiredField = null;
    __isset_bit_vector.set(__CONSTRUCTIONREQUIREDFIELD_ISSET_ID, false);
    this.constructionRequiredField = 0;
    __isset_bit_vector.set(__ANINT8_ISSET_ID, false);
    this.anInt8 = 0;
  }

  @SuppressWarnings("unchecked")
  public void addTo(_Fields field, Object elem) {
    switch(field) {
      case A_LIST: {
        if (elem instanceof String ) {
          if (this.aList == null) {
            this.aList = new ArrayList<String>();
          }
          this.aList.add((String)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + aList + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case A_SET: {
        if (elem instanceof Integer ) {
          if (this.aSet == null) {
            this.aSet = new HashSet<Integer>();
          }
          this.aSet.add((Integer)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + aSet + " should be Set, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case SUB_REQUESTS: {
        if (elem instanceof Request ) {
          if (this.subRequests == null) {
            this.subRequests = new ArrayList<Request>();
          }
          this.subRequests.add((Request)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + subRequests + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
    }
  }

  @SuppressWarnings("unchecked")
  public void putTo(_Fields field, Object key, Object value) {
    switch(field) {
        case A_MAP: {
        if (key instanceof Long && value instanceof Long ) {
          if (this.aMap == null) {
            this.aMap = new HashMap<Long,Long>();
          }
          this.aMap.put((Long)key, (Long)value);
        } else {
          throw new IllegalArgumentException("[Long,Long] is expected, but [" +  key.getClass().toString() + ", " + value.getClass().toString() + "] type found.");
        }
        break;
      }
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case A_LIST:
      if (value == null) {
        this.aList = null;
      } else {
        this.aList = (List<String>) value;
      }
      break;
    case A_SET:
      if (value == null) {
        this.aSet = null;
      } else {
        this.aSet = (Set<Integer>) value;
      }
      break;
    case A_MAP:
      if (value == null) {
        this.aMap = null;
      } else {
        this.aMap = (Map<Long,Long>) value;
      }
      break;
    case A_REQUEST:
      if (value == null) {
        this.aRequest = null;
      } else {
        this.aRequest = (Request) value;
      }
      break;
    case SUB_REQUESTS:
      if (value == null) {
        this.subRequests = null;
      } else {
        this.subRequests = (List<Request>) value;
      }
      break;
    case HAS_DEFAULT:
      if (value == null) {
        this.hasDefault = null;
      } else {
        this.hasDefault = (String) value;
      }
      break;
    case NO_COMMENT:
      if (value == null) {
        __isset_bit_vector.clear(__NOCOMMENT_ISSET_ID);
      } else {
        this.noComment = (Long) value;
        __isset_bit_vector.set(__NOCOMMENT_ISSET_ID, true);
      }
      break;
    case DOUBLE_SLASH_COMMENT:
      if (value == null) {
        __isset_bit_vector.clear(__DOUBLESLASHCOMMENT_ISSET_ID);
      } else {
        this.doubleSlashComment = (Long) value;
        __isset_bit_vector.set(__DOUBLESLASHCOMMENT_ISSET_ID, true);
      }
      break;
    case HASHTAG_COMMENT:
      if (value == null) {
        __isset_bit_vector.clear(__HASHTAGCOMMENT_ISSET_ID);
      } else {
        this.hashtagComment = (Long) value;
        __isset_bit_vector.set(__HASHTAGCOMMENT_ISSET_ID, true);
      }
      break;
    case SINGLE_ASTERISK_COMMENT:
      if (value == null) {
        __isset_bit_vector.clear(__SINGLEASTERISKCOMMENT_ISSET_ID);
      } else {
        this.singleAsteriskComment = (Long) value;
        __isset_bit_vector.set(__SINGLEASTERISKCOMMENT_ISSET_ID, true);
      }
      break;
    case DOC_STRING_COMMENT:
      if (value == null) {
        __isset_bit_vector.clear(__DOCSTRINGCOMMENT_ISSET_ID);
      } else {
        this.docStringComment = (Long) value;
        __isset_bit_vector.set(__DOCSTRINGCOMMENT_ISSET_ID, true);
      }
      break;
    case REC_REQUEST:
      if (value == null) {
        this.recRequest = null;
      } else {
        this.recRequest = (Recursive) value;
      }
      break;
    case REQUIRED_FIELD:
      if (value == null) {
        this.requiredField = null;
      } else {
        this.requiredField = (String) value;
      }
      break;
    case CONSTRUCTION_REQUIRED_FIELD:
      if (value == null) {
        __isset_bit_vector.clear(__CONSTRUCTIONREQUIREDFIELD_ISSET_ID);
      } else {
        this.constructionRequiredField = (Long) value;
        __isset_bit_vector.set(__CONSTRUCTIONREQUIREDFIELD_ISSET_ID, true);
      }
      break;
    case AN_INT8:
      if (value == null) {
        __isset_bit_vector.clear(__ANINT8_ISSET_ID);
      } else {
        this.anInt8 = (Byte) value;
        __isset_bit_vector.set(__ANINT8_ISSET_ID, true);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case A_LIST:
      return this.aList;
    case A_SET:
      return this.aSet;
    case A_MAP:
      return this.aMap;
    case A_REQUEST:
      return this.aRequest;
    case SUB_REQUESTS:
      return this.subRequests;
    case HAS_DEFAULT:
      return this.hasDefault;
    case NO_COMMENT:
      return new Long(this.noComment);
    case DOUBLE_SLASH_COMMENT:
      return new Long(this.doubleSlashComment);
    case HASHTAG_COMMENT:
      return new Long(this.hashtagComment);
    case SINGLE_ASTERISK_COMMENT:
      return new Long(this.singleAsteriskComment);
    case DOC_STRING_COMMENT:
      return new Long(this.docStringComment);
    case REC_REQUEST:
      return this.recRequest;
    case REQUIRED_FIELD:
      return this.requiredField;
    case CONSTRUCTION_REQUIRED_FIELD:
      return new Long(this.constructionRequiredField);
    case AN_INT8:
      return new Byte(this.anInt8);
    }
    throw new IllegalStateException();
  }

  @SuppressWarnings("unchecked")
  public <Any> Any get(_Fields field) {
    switch(field) {
      case A_LIST:
          Any rval_aList = (Any)((List<String>) getFieldValue(field));
          return rval_aList;
      case A_SET:
          Any rval_aSet = (Any)((Set<Integer>) getFieldValue(field));
          return rval_aSet;
      case A_MAP:
          Any rval_aMap = (Any)((Map<Long,Long>) getFieldValue(field));
          return rval_aMap;
      case A_REQUEST:
          Any rval_aRequest = (Any)((Request) getFieldValue(field));
          return rval_aRequest;
      case SUB_REQUESTS:
          Any rval_subRequests = (Any)((List<Request>) getFieldValue(field));
          return rval_subRequests;
      case HAS_DEFAULT:
          Any rval_hasDefault = (Any)((String) getFieldValue(field));
          return rval_hasDefault;
      case NO_COMMENT:
          Any rval_noComment = (Any)((Long) getFieldValue(field));
          return rval_noComment;
      case DOUBLE_SLASH_COMMENT:
          Any rval_doubleSlashComment = (Any)((Long) getFieldValue(field));
          return rval_doubleSlashComment;
      case HASHTAG_COMMENT:
          Any rval_hashtagComment = (Any)((Long) getFieldValue(field));
          return rval_hashtagComment;
      case SINGLE_ASTERISK_COMMENT:
          Any rval_singleAsteriskComment = (Any)((Long) getFieldValue(field));
          return rval_singleAsteriskComment;
      case DOC_STRING_COMMENT:
          Any rval_docStringComment = (Any)((Long) getFieldValue(field));
          return rval_docStringComment;
      case REC_REQUEST:
          Any rval_recRequest = (Any)((Recursive) getFieldValue(field));
          return rval_recRequest;
      case REQUIRED_FIELD:
          Any rval_requiredField = (Any)((String) getFieldValue(field));
          return rval_requiredField;
      case CONSTRUCTION_REQUIRED_FIELD:
          Any rval_constructionRequiredField = (Any)((Long) getFieldValue(field));
          return rval_constructionRequiredField;
      case AN_INT8:
          Any rval_anInt8 = (Any)((Byte) getFieldValue(field));
          return rval_anInt8;
      default:
        throw new IllegalStateException("Invalid field type");
    }
  }

  /** Returns true if field corresponding to field is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case A_LIST:
        return aList != null;
    case A_SET:
        return aSet != null;
    case A_MAP:
        return aMap != null;
    case A_REQUEST:
        return aRequest != null;
    case SUB_REQUESTS:
        return subRequests != null;
    case HAS_DEFAULT:
        return hasDefault != null;
    case NO_COMMENT:
        return __isset_bit_vector.get(__NOCOMMENT_ISSET_ID);
    case DOUBLE_SLASH_COMMENT:
        return __isset_bit_vector.get(__DOUBLESLASHCOMMENT_ISSET_ID);
    case HASHTAG_COMMENT:
        return __isset_bit_vector.get(__HASHTAGCOMMENT_ISSET_ID);
    case SINGLE_ASTERISK_COMMENT:
        return __isset_bit_vector.get(__SINGLEASTERISKCOMMENT_ISSET_ID);
    case DOC_STRING_COMMENT:
        return __isset_bit_vector.get(__DOCSTRINGCOMMENT_ISSET_ID);
    case REC_REQUEST:
        return recRequest != null;
    case REQUIRED_FIELD:
        return requiredField != null;
    case CONSTRUCTION_REQUIRED_FIELD:
        return __isset_bit_vector.get(__CONSTRUCTIONREQUIREDFIELD_ISSET_ID);
    case AN_INT8:
        return __isset_bit_vector.get(__ANINT8_ISSET_ID);
    }
    throw new IllegalStateException();
  }

  @java.lang.Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;
    boolean this_present_aList = true && this.isSet(_Fields.A_LIST);
    boolean that_present_aList = true && that.isSet(_Fields.A_LIST);
    if (this_present_aList || that_present_aList) {
      if (!(this_present_aList && that_present_aList))
        return false;
      if (!this.aList.equals(that.aList))
        return false;
    }
    boolean this_present_aSet = true && this.isSet(_Fields.A_SET);
    boolean that_present_aSet = true && that.isSet(_Fields.A_SET);
    if (this_present_aSet || that_present_aSet) {
      if (!(this_present_aSet && that_present_aSet))
        return false;
      if (!this.aSet.equals(that.aSet))
        return false;
    }
    boolean this_present_aMap = true && this.isSet(_Fields.A_MAP);
    boolean that_present_aMap = true && that.isSet(_Fields.A_MAP);
    if (this_present_aMap || that_present_aMap) {
      if (!(this_present_aMap && that_present_aMap))
        return false;
      if (!this.aMap.equals(that.aMap))
        return false;
    }
    boolean this_present_aRequest = true && this.isSet(_Fields.A_REQUEST);
    boolean that_present_aRequest = true && that.isSet(_Fields.A_REQUEST);
    if (this_present_aRequest || that_present_aRequest) {
      if (!(this_present_aRequest && that_present_aRequest))
        return false;
      if (!this.aRequest.equals(that.aRequest))
        return false;
    }
    boolean this_present_subRequests = true && this.isSet(_Fields.SUB_REQUESTS);
    boolean that_present_subRequests = true && that.isSet(_Fields.SUB_REQUESTS);
    if (this_present_subRequests || that_present_subRequests) {
      if (!(this_present_subRequests && that_present_subRequests))
        return false;
      if (!this.subRequests.equals(that.subRequests))
        return false;
    }
    boolean this_present_hasDefault = true && this.isSet(_Fields.HAS_DEFAULT);
    boolean that_present_hasDefault = true && that.isSet(_Fields.HAS_DEFAULT);
    if (this_present_hasDefault || that_present_hasDefault) {
      if (!(this_present_hasDefault && that_present_hasDefault))
        return false;
      if (!this.hasDefault.equals(that.hasDefault))
        return false;
    }
    boolean this_present_noComment = true && this.isSet(_Fields.NO_COMMENT);
    boolean that_present_noComment = true && that.isSet(_Fields.NO_COMMENT);
    if (this_present_noComment || that_present_noComment) {
      if (!(this_present_noComment && that_present_noComment))
        return false;
      if (this.noComment != that.noComment)
        return false;
    }
    boolean this_present_doubleSlashComment = true && this.isSet(_Fields.DOUBLE_SLASH_COMMENT);
    boolean that_present_doubleSlashComment = true && that.isSet(_Fields.DOUBLE_SLASH_COMMENT);
    if (this_present_doubleSlashComment || that_present_doubleSlashComment) {
      if (!(this_present_doubleSlashComment && that_present_doubleSlashComment))
        return false;
      if (this.doubleSlashComment != that.doubleSlashComment)
        return false;
    }
    boolean this_present_hashtagComment = true && this.isSet(_Fields.HASHTAG_COMMENT);
    boolean that_present_hashtagComment = true && that.isSet(_Fields.HASHTAG_COMMENT);
    if (this_present_hashtagComment || that_present_hashtagComment) {
      if (!(this_present_hashtagComment && that_present_hashtagComment))
        return false;
      if (this.hashtagComment != that.hashtagComment)
        return false;
    }
    boolean this_present_singleAsteriskComment = true && this.isSet(_Fields.SINGLE_ASTERISK_COMMENT);
    boolean that_present_singleAsteriskComment = true && that.isSet(_Fields.SINGLE_ASTERISK_COMMENT);
    if (this_present_singleAsteriskComment || that_present_singleAsteriskComment) {
      if (!(this_present_singleAsteriskComment && that_present_singleAsteriskComment))
        return false;
      if (this.singleAsteriskComment != that.singleAsteriskComment)
        return false;
    }
    boolean this_present_docStringComment = true && this.isSet(_Fields.DOC_STRING_COMMENT);
    boolean that_present_docStringComment = true && that.isSet(_Fields.DOC_STRING_COMMENT);
    if (this_present_docStringComment || that_present_docStringComment) {
      if (!(this_present_docStringComment && that_present_docStringComment))
        return false;
      if (this.docStringComment != that.docStringComment)
        return false;
    }
    boolean this_present_recRequest = true && this.isSet(_Fields.REC_REQUEST);
    boolean that_present_recRequest = true && that.isSet(_Fields.REC_REQUEST);
    if (this_present_recRequest || that_present_recRequest) {
      if (!(this_present_recRequest && that_present_recRequest))
        return false;
      if (!this.recRequest.equals(that.recRequest))
        return false;
    }
    boolean this_present_requiredField = true && this.isSet(_Fields.REQUIRED_FIELD);
    boolean that_present_requiredField = true && that.isSet(_Fields.REQUIRED_FIELD);
    if (this_present_requiredField || that_present_requiredField) {
      if (!(this_present_requiredField && that_present_requiredField))
        return false;
      if (!this.requiredField.equals(that.requiredField))
        return false;
    }
    boolean this_present_constructionRequiredField = true && this.isSet(_Fields.CONSTRUCTION_REQUIRED_FIELD);
    boolean that_present_constructionRequiredField = true && that.isSet(_Fields.CONSTRUCTION_REQUIRED_FIELD);
    if (this_present_constructionRequiredField || that_present_constructionRequiredField) {
      if (!(this_present_constructionRequiredField && that_present_constructionRequiredField))
        return false;
      if (this.constructionRequiredField != that.constructionRequiredField)
        return false;
    }
    boolean this_present_anInt8 = true && this.isSet(_Fields.AN_INT8);
    boolean that_present_anInt8 = true && that.isSet(_Fields.AN_INT8);
    if (this_present_anInt8 || that_present_anInt8) {
      if (!(this_present_anInt8 && that_present_anInt8))
        return false;
      if (this.anInt8 != that.anInt8)
        return false;
    }

    return true;
  }

  @java.lang.Override
  @SuppressWarnings("unchecked")
  public int hashCode() {
    int hashCode = 1;
    if (true && (isSet(_Fields.A_LIST))) {
        hashCode = 31 * hashCode + aList.hashCode();
    }
    if (true && (isSet(_Fields.A_SET))) {
        hashCode = 31 * hashCode + aSet.hashCode();
    }
    if (true && (isSet(_Fields.A_MAP))) {
        hashCode = 31 * hashCode + aMap.hashCode();
    }
    if (true && (isSet(_Fields.A_REQUEST))) {
        hashCode = 31 * hashCode + aRequest.hashCode();
    }
    if (true && (isSet(_Fields.SUB_REQUESTS))) {
        hashCode = 31 * hashCode + subRequests.hashCode();
    }
    if (true && (isSet(_Fields.HAS_DEFAULT))) {
        hashCode = 31 * hashCode + hasDefault.hashCode();
    }
    if (true && (isSet(_Fields.NO_COMMENT))) {
        hashCode = 31 * hashCode + ((Long)noComment).hashCode();
    }
    if (true && (isSet(_Fields.DOUBLE_SLASH_COMMENT))) {
        hashCode = 31 * hashCode + ((Long)doubleSlashComment).hashCode();
    }
    if (true && (isSet(_Fields.HASHTAG_COMMENT))) {
        hashCode = 31 * hashCode + ((Long)hashtagComment).hashCode();
    }
    if (true && (isSet(_Fields.SINGLE_ASTERISK_COMMENT))) {
        hashCode = 31 * hashCode + ((Long)singleAsteriskComment).hashCode();
    }
    if (true && (isSet(_Fields.DOC_STRING_COMMENT))) {
        hashCode = 31 * hashCode + ((Long)docStringComment).hashCode();
    }
    if (true && (isSet(_Fields.REC_REQUEST))) {
        hashCode = 31 * hashCode + recRequest.hashCode();
    }
    if (true && (isSet(_Fields.REQUIRED_FIELD))) {
        hashCode = 31 * hashCode + requiredField.hashCode();
    }
    if (true && (isSet(_Fields.CONSTRUCTION_REQUIRED_FIELD))) {
        hashCode = 31 * hashCode + ((Long)constructionRequiredField).hashCode();
    }
    if (true && (isSet(_Fields.AN_INT8))) {
        hashCode = 31 * hashCode + ((Byte)anInt8).hashCode();
    }
    return hashCode;
  }

  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Request typedOther = (Request)other;

    lastComparison = Boolean.valueOf(isSet(_Fields.A_LIST)).compareTo(typedOther.isSet(_Fields.A_LIST));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.A_LIST)) {
      lastComparison = TBaseHelper.compareTo(this.aList, typedOther.aList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.A_SET)).compareTo(typedOther.isSet(_Fields.A_SET));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.A_SET)) {
      lastComparison = TBaseHelper.compareTo(this.aSet, typedOther.aSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.A_MAP)).compareTo(typedOther.isSet(_Fields.A_MAP));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.A_MAP)) {
      lastComparison = TBaseHelper.compareTo(this.aMap, typedOther.aMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.A_REQUEST)).compareTo(typedOther.isSet(_Fields.A_REQUEST));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.A_REQUEST)) {
      lastComparison = TBaseHelper.compareTo(this.aRequest, typedOther.aRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.SUB_REQUESTS)).compareTo(typedOther.isSet(_Fields.SUB_REQUESTS));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.SUB_REQUESTS)) {
      lastComparison = TBaseHelper.compareTo(this.subRequests, typedOther.subRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.HAS_DEFAULT)).compareTo(typedOther.isSet(_Fields.HAS_DEFAULT));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.HAS_DEFAULT)) {
      lastComparison = TBaseHelper.compareTo(this.hasDefault, typedOther.hasDefault);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.NO_COMMENT)).compareTo(typedOther.isSet(_Fields.NO_COMMENT));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.NO_COMMENT)) {
      lastComparison = TBaseHelper.compareTo(this.noComment, typedOther.noComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.DOUBLE_SLASH_COMMENT)).compareTo(typedOther.isSet(_Fields.DOUBLE_SLASH_COMMENT));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.DOUBLE_SLASH_COMMENT)) {
      lastComparison = TBaseHelper.compareTo(this.doubleSlashComment, typedOther.doubleSlashComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.HASHTAG_COMMENT)).compareTo(typedOther.isSet(_Fields.HASHTAG_COMMENT));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.HASHTAG_COMMENT)) {
      lastComparison = TBaseHelper.compareTo(this.hashtagComment, typedOther.hashtagComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.SINGLE_ASTERISK_COMMENT)).compareTo(typedOther.isSet(_Fields.SINGLE_ASTERISK_COMMENT));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.SINGLE_ASTERISK_COMMENT)) {
      lastComparison = TBaseHelper.compareTo(this.singleAsteriskComment, typedOther.singleAsteriskComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.DOC_STRING_COMMENT)).compareTo(typedOther.isSet(_Fields.DOC_STRING_COMMENT));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.DOC_STRING_COMMENT)) {
      lastComparison = TBaseHelper.compareTo(this.docStringComment, typedOther.docStringComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.REC_REQUEST)).compareTo(typedOther.isSet(_Fields.REC_REQUEST));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.REC_REQUEST)) {
      lastComparison = TBaseHelper.compareTo(this.recRequest, typedOther.recRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.REQUIRED_FIELD)).compareTo(typedOther.isSet(_Fields.REQUIRED_FIELD));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.REQUIRED_FIELD)) {
      lastComparison = TBaseHelper.compareTo(this.requiredField, typedOther.requiredField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.CONSTRUCTION_REQUIRED_FIELD)).compareTo(typedOther.isSet(_Fields.CONSTRUCTION_REQUIRED_FIELD));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.CONSTRUCTION_REQUIRED_FIELD)) {
      lastComparison = TBaseHelper.compareTo(this.constructionRequiredField, typedOther.constructionRequiredField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet(_Fields.AN_INT8)).compareTo(typedOther.isSet(_Fields.AN_INT8));
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet(_Fields.AN_INT8)) {
      lastComparison = TBaseHelper.compareTo(this.anInt8, typedOther.anInt8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // A_LIST
          if (field.type == TType.LIST) {
            {
            TList _list0 = iprot.readListBegin();
            this.aList = new ArrayList<String>(_list0.size);
            for (int _i1 = 0; _i1 < _list0.size; ++_i1)
            {
              String _elem2;
              _elem2 = iprot.readString();
              this.aList.add(_elem2);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // A_SET
          if (field.type == TType.SET) {
            {
            TSet _set3 = iprot.readSetBegin();
            this.aSet = new HashSet<Integer>(2*_set3.size);
            for (int _i4 = 0; _i4 < _set3.size; ++_i4)
            {
              int _elem5;
              _elem5 = iprot.readI32();
              this.aSet.add(_elem5);
            }
            iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // A_MAP
          if (field.type == TType.MAP) {
            {
            TMap _map6 = iprot.readMapBegin();
            this.aMap = new HashMap<Long,Long>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              long _key8;
              long _val9;
              _key8 = iprot.readI64();
              _val9 = iprot.readI64();
              this.aMap.put(_key8, _val9);
            }
            iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // A_REQUEST
          if (field.type == TType.STRUCT) {
            this.aRequest = new Request();
            this.aRequest.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SUB_REQUESTS
          if (field.type == TType.LIST) {
            {
            TList _list10 = iprot.readListBegin();
            this.subRequests = new ArrayList<Request>(_list10.size);
            for (int _i11 = 0; _i11 < _list10.size; ++_i11)
            {
              Request _elem12;
              _elem12 = new Request();
              _elem12.read(iprot);
              this.subRequests.add(_elem12);
            }
            iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // HAS_DEFAULT
          if (field.type == TType.STRING) {
            this.hasDefault = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // NO_COMMENT
          if (field.type == TType.I64) {
            this.noComment = iprot.readI64();
            __isset_bit_vector.set(__NOCOMMENT_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // DOUBLE_SLASH_COMMENT
          if (field.type == TType.I64) {
            this.doubleSlashComment = iprot.readI64();
            __isset_bit_vector.set(__DOUBLESLASHCOMMENT_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // HASHTAG_COMMENT
          if (field.type == TType.I64) {
            this.hashtagComment = iprot.readI64();
            __isset_bit_vector.set(__HASHTAGCOMMENT_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // SINGLE_ASTERISK_COMMENT
          if (field.type == TType.I64) {
            this.singleAsteriskComment = iprot.readI64();
            __isset_bit_vector.set(__SINGLEASTERISKCOMMENT_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // DOC_STRING_COMMENT
          if (field.type == TType.I64) {
            this.docStringComment = iprot.readI64();
            __isset_bit_vector.set(__DOCSTRINGCOMMENT_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // REC_REQUEST
          if (field.type == TType.STRUCT) {
            this.recRequest = new Recursive();
            this.recRequest.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // REQUIRED_FIELD
          if (field.type == TType.STRING) {
            this.requiredField = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // CONSTRUCTION_REQUIRED_FIELD
          if (field.type == TType.I64) {
            this.constructionRequiredField = iprot.readI64();
            __isset_bit_vector.set(__CONSTRUCTIONREQUIREDFIELD_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // AN_INT8
          if (field.type == TType.BYTE) {
            this.anInt8 = iprot.readByte();
            __isset_bit_vector.set(__ANINT8_ISSET_ID, true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.aList != null) {
      oprot.writeFieldBegin(A_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.aList.size()));
        for (String _iter13 : this.aList)
        {
          oprot.writeString(_iter13);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.aSet != null) {
      oprot.writeFieldBegin(A_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.aSet.size()));
        for (int _iter14 : this.aSet)
        {
          oprot.writeI32(_iter14);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.aMap != null) {
      oprot.writeFieldBegin(A_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I64, TType.I64, this.aMap.size()));
        for (Map.Entry<Long, Long> _iter15 : this.aMap.entrySet())
        {
          oprot.writeI64(_iter15.getKey());
          oprot.writeI64(_iter15.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.aRequest != null) {
      if (isSet(_Fields.A_REQUEST)) {
        oprot.writeFieldBegin(A_REQUEST_FIELD_DESC);
        this.aRequest.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.subRequests != null) {
      oprot.writeFieldBegin(SUB_REQUESTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.subRequests.size()));
        for (Request _iter16 : this.subRequests)
        {
          _iter16.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.hasDefault != null) {
      oprot.writeFieldBegin(HAS_DEFAULT_FIELD_DESC);
      oprot.writeString(this.hasDefault);
      oprot.writeFieldEnd();
    }
    if (isSet(_Fields.NO_COMMENT)) {
      oprot.writeFieldBegin(NO_COMMENT_FIELD_DESC);
      oprot.writeI64(this.noComment);
      oprot.writeFieldEnd();
    }
    if (isSet(_Fields.DOUBLE_SLASH_COMMENT)) {
      oprot.writeFieldBegin(DOUBLE_SLASH_COMMENT_FIELD_DESC);
      oprot.writeI64(this.doubleSlashComment);
      oprot.writeFieldEnd();
    }
    if (isSet(_Fields.HASHTAG_COMMENT)) {
      oprot.writeFieldBegin(HASHTAG_COMMENT_FIELD_DESC);
      oprot.writeI64(this.hashtagComment);
      oprot.writeFieldEnd();
    }
    if (isSet(_Fields.SINGLE_ASTERISK_COMMENT)) {
      oprot.writeFieldBegin(SINGLE_ASTERISK_COMMENT_FIELD_DESC);
      oprot.writeI64(this.singleAsteriskComment);
      oprot.writeFieldEnd();
    }
    if (isSet(_Fields.DOC_STRING_COMMENT)) {
      oprot.writeFieldBegin(DOC_STRING_COMMENT_FIELD_DESC);
      oprot.writeI64(this.docStringComment);
      oprot.writeFieldEnd();
    }
    if (this.recRequest != null) {
      if (isSet(_Fields.REC_REQUEST)) {
        oprot.writeFieldBegin(REC_REQUEST_FIELD_DESC);
        this.recRequest.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.requiredField != null) {
      oprot.writeFieldBegin(REQUIRED_FIELD_FIELD_DESC);
      oprot.writeString(this.requiredField);
      oprot.writeFieldEnd();
    }
    if (isSet(_Fields.CONSTRUCTION_REQUIRED_FIELD)) {
      oprot.writeFieldBegin(CONSTRUCTION_REQUIRED_FIELD_FIELD_DESC);
      oprot.writeI64(this.constructionRequiredField);
      oprot.writeFieldEnd();
    }
    if (isSet(_Fields.AN_INT8)) {
      oprot.writeFieldBegin(AN_INT8_FIELD_DESC);
      oprot.writeByte(this.anInt8);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @java.lang.Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;
    sb.append("aList:");
    if (this.aList == null) {
      sb.append("null");
    } else {
      sb.append(this.aList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aSet:");
    if (this.aSet == null) {
      sb.append("null");
    } else {
      sb.append(this.aSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aMap:");
    if (this.aMap == null) {
      sb.append("null");
    } else {
      sb.append(this.aMap);
    }
    first = false;
    if (isSet(_Fields.A_REQUEST)) {
      if (!first) sb.append(", ");
      sb.append("aRequest:");
      if (this.aRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.aRequest);
      }
      first = false;
      }
    if (!first) sb.append(", ");
    sb.append("subRequests:");
    if (this.subRequests == null) {
      sb.append("null");
    } else {
      sb.append(this.subRequests);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasDefault:");
    if (this.hasDefault == null) {
      sb.append("null");
    } else {
      sb.append(this.hasDefault);
    }
    first = false;
    if (isSet(_Fields.NO_COMMENT)) {
      if (!first) sb.append(", ");
      sb.append("noComment:");
      sb.append(this.noComment);
      first = false;
      }
    if (isSet(_Fields.DOUBLE_SLASH_COMMENT)) {
      if (!first) sb.append(", ");
      sb.append("doubleSlashComment:");
      sb.append(this.doubleSlashComment);
      first = false;
      }
    if (isSet(_Fields.HASHTAG_COMMENT)) {
      if (!first) sb.append(", ");
      sb.append("hashtagComment:");
      sb.append(this.hashtagComment);
      first = false;
      }
    if (isSet(_Fields.SINGLE_ASTERISK_COMMENT)) {
      if (!first) sb.append(", ");
      sb.append("singleAsteriskComment:");
      sb.append(this.singleAsteriskComment);
      first = false;
      }
    if (isSet(_Fields.DOC_STRING_COMMENT)) {
      if (!first) sb.append(", ");
      sb.append("docStringComment:");
      sb.append(this.docStringComment);
      first = false;
      }
    if (isSet(_Fields.REC_REQUEST)) {
      if (!first) sb.append(", ");
      sb.append("recRequest:");
      if (this.recRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.recRequest);
      }
      first = false;
      }
    if (!first) sb.append(", ");
    sb.append("requiredField:");
    if (this.requiredField == null) {
      sb.append("null");
    } else {
      sb.append(this.requiredField);
    }
    first = false;
    if (isSet(_Fields.CONSTRUCTION_REQUIRED_FIELD)) {
      if (!first) sb.append(", ");
      sb.append("constructionRequiredField:");
      sb.append(this.constructionRequiredField);
      first = false;
      }
    if (isSet(_Fields.AN_INT8)) {
      if (!first) sb.append(", ");
      sb.append("anInt8:");
      sb.append(this.anInt8);
      first = false;
      }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (requiredField == null) {
      throw new TProtocolException("Required field 'requiredField' was not present! Struct: " + toString());
    }
  }

  public static final _Fields A_LIST = _Fields.A_LIST;
  public static final _Fields A_SET = _Fields.A_SET;
  public static final _Fields A_MAP = _Fields.A_MAP;
  public static final _Fields A_REQUEST = _Fields.A_REQUEST;
  public static final _Fields SUB_REQUESTS = _Fields.SUB_REQUESTS;
  public static final _Fields HAS_DEFAULT = _Fields.HAS_DEFAULT;
  public static final _Fields NO_COMMENT = _Fields.NO_COMMENT;
  public static final _Fields DOUBLE_SLASH_COMMENT = _Fields.DOUBLE_SLASH_COMMENT;
  public static final _Fields HASHTAG_COMMENT = _Fields.HASHTAG_COMMENT;
  public static final _Fields SINGLE_ASTERISK_COMMENT = _Fields.SINGLE_ASTERISK_COMMENT;
  public static final _Fields DOC_STRING_COMMENT = _Fields.DOC_STRING_COMMENT;
  public static final _Fields REC_REQUEST = _Fields.REC_REQUEST;
  public static final _Fields REQUIRED_FIELD = _Fields.REQUIRED_FIELD;
  public static final _Fields CONSTRUCTION_REQUIRED_FIELD = _Fields.CONSTRUCTION_REQUIRED_FIELD;
  public static final _Fields AN_INT8 = _Fields.AN_INT8;

  public static class Builder {
    private List<String> aList;
    private Set<Integer> aSet;
    private Map<Long,Long> aMap;
    private Request aRequest;
    private List<Request> subRequests;
    private String hasDefault;
    private Long noComment;
    private Long doubleSlashComment;
    private Long hashtagComment;
    private Long singleAsteriskComment;
    private Long docStringComment;
    private Recursive recRequest;
    private String requiredField;
    private Long constructionRequiredField;
    private Byte anInt8;
  @SuppressWarnings("unchecked")
  public Builder set (_Fields field, Object value) {
    switch(field) {
      case A_LIST: {
        if (value != null) {
          this.aList = (List<String>) value;
        }
        break;
      }
      case A_SET: {
        if (value != null) {
          this.aSet = (Set<Integer>) value;
        }
        break;
      }
      case A_MAP: {
        if (value != null) {
          this.aMap = (Map<Long,Long>) value;
        }
        break;
      }
      case A_REQUEST: {
        if (value != null) {
          this.aRequest = (Request) value;
        }
        break;
      }
      case SUB_REQUESTS: {
        if (value != null) {
          this.subRequests = (List<Request>) value;
        }
        break;
      }
      case HAS_DEFAULT: {
        if (value != null) {
          this.hasDefault = (String) value;
        }
        break;
      }
      case NO_COMMENT: {
        if (value != null) {
          this.noComment = (Long) value;
        }
        break;
      }
      case DOUBLE_SLASH_COMMENT: {
        if (value != null) {
          this.doubleSlashComment = (Long) value;
        }
        break;
      }
      case HASHTAG_COMMENT: {
        if (value != null) {
          this.hashtagComment = (Long) value;
        }
        break;
      }
      case SINGLE_ASTERISK_COMMENT: {
        if (value != null) {
          this.singleAsteriskComment = (Long) value;
        }
        break;
      }
      case DOC_STRING_COMMENT: {
        if (value != null) {
          this.docStringComment = (Long) value;
        }
        break;
      }
      case REC_REQUEST: {
        if (value != null) {
          this.recRequest = (Recursive) value;
        }
        break;
      }
      case REQUIRED_FIELD: {
        if (value != null) {
          this.requiredField = (String) value;
        }
        break;
      }
      case CONSTRUCTION_REQUIRED_FIELD: {
        if (value != null) {
          this.constructionRequiredField = (Long) value;
        }
        break;
      }
      case AN_INT8: {
        if (value != null) {
          this.anInt8 = (Byte) value;
        }
        break;
      }
      default: {
        break;
      }
    }
    return this;
  }
  @SuppressWarnings("unchecked")
  public Builder addTo(_Fields field, Object elem) {
    switch(field) {
      case A_LIST: {
        if (elem instanceof String ) {
          if (this.aList == null) {
              this.aList = new ArrayList<String>();
          }
          this.aList.add((String)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + aList + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case A_SET: {
        if (elem instanceof Integer ) {
          if (this.aSet == null) {
              this.aSet = new HashSet<Integer>();
          }
          this.aSet.add((Integer)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + aSet + " should be Set, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
      case SUB_REQUESTS: {
        if (elem instanceof Request ) {
          if (this.subRequests == null) {
              this.subRequests = new ArrayList<Request>();
          }
          this.subRequests.add((Request)elem);
        } else {
          throw new IllegalArgumentException("Type of field " + subRequests + " should be List, but found " +  elem.getClass().toString() + " type");
        }
        break;
      }
    }
    return this;
  }
  @SuppressWarnings("unchecked")
  public Builder putTo(_Fields field, Object key, Object value) {
    switch(field) {
      case A_MAP: {
        if (key instanceof Long && value instanceof Long ) {
          if (this.aMap == null) {
            this.aMap = new HashMap<Long,Long>();
          }
          this.aMap.put((Long)key, (Long)value);
        } else {
          throw new IllegalArgumentException("[Long,Long] is expected, but [" +  key.getClass().toString() + ", " + value.getClass().toString() + "] type found.");
        }
        break;
      }
    }
    return this;
  }
  public Request build() {
    // check for required fields
    if (this.requiredField == null) {
      throw new IllegalArgumentException("Required field 'requiredField' was not present! Struct: " + toString());
    }
    return new Request(aList,aSet,aMap,aRequest,subRequests,hasDefault,noComment,doubleSlashComment,hashtagComment,singleAsteriskComment,docStringComment,recRequest,requiredField,constructionRequiredField,anInt8);
    }
  }
}

