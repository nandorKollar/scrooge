/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
#import "TFNTwitterThriftGoldRequest.h"

@import ApacheThrift;

@implementation TFNTwitterThriftGoldRequest

- (NSString*)description
{
    NSMutableString* ms = [NSMutableString stringWithString:@"TFNTwitterThriftGoldRequest( "];
    [ms appendString:@"aList:"];
    [ms appendFormat:@"%@ ", _aList];
    [ms appendString:@"aSet:"];
    [ms appendFormat:@"%@ ", _aSet];
    [ms appendString:@"aMap:"];
    [ms appendFormat:@"%@ ", _aMap];
    [ms appendString:@"aRequest:"];
    [ms appendFormat:@"%@ ", _aRequest];
    [ms appendString:@"subRequests:"];
    [ms appendFormat:@"%@ ", _subRequests];
    [ms appendString:@"hasDefault:"];
    [ms appendFormat:@"%@ ", _hasDefault];
    [ms appendString:@"noComment:"];
    [ms appendFormat:@"%@ ", @(_noComment)];
    [ms appendString:@"doubleSlashComment:"];
    [ms appendFormat:@"%@ ", @(_doubleSlashComment)];
    [ms appendString:@"hashtagComment:"];
    [ms appendFormat:@"%@ ", @(_hashtagComment)];
    [ms appendString:@"singleAsteriskComment:"];
    [ms appendFormat:@"%@ ", @(_singleAsteriskComment)];
    [ms appendString:@"docStringComment:"];
    [ms appendFormat:@"%@ ", @(_docStringComment)];
    [ms appendString:@"recRequest:"];
    [ms appendFormat:@"%@ ", _recRequest];
    [ms appendString:@"requiredField:"];
    [ms appendFormat:@"%@ ", _requiredField];
    [ms appendString:@"constructionRequiredField:"];
    [ms appendFormat:@"%@ ", @(_constructionRequiredField)];
    [ms appendString:@"anInt8:"];
    [ms appendFormat:@"%@ ", @(_anInt8)];
    [ms appendString:@")"];
    return [NSString stringWithString:ms];
}

- (instancetype)initWithAList:(NSArray *)aList aSet:(NSSet *)aSet aMap:(NSDictionary *)aMap subRequests:(NSArray *)subRequests hasDefault:(NSString *)hasDefault requiredField:(NSString *)requiredField constructionRequiredField:(int64_t)constructionRequiredField
{
    if (self = [super init]) {
        [self setAList:aList];
        [self setASet:aSet];
        [self setAMap:aMap];
        [self setSubRequests:subRequests];
        [self setHasDefault:hasDefault];
        [self setRequiredField:requiredField];
        [self setConstructionRequiredField:constructionRequiredField];
    }

    return self;
}

+ (instancetype)instanceWithAList:(NSArray *)aList aSet:(NSSet *)aSet aMap:(NSDictionary *)aMap subRequests:(NSArray *)subRequests hasDefault:(NSString *)hasDefault requiredField:(NSString *)requiredField constructionRequiredField:(int64_t)constructionRequiredField error:(NSError **)error
{
    TFNTwitterThriftGoldRequest *instance = [[TFNTwitterThriftGoldRequest alloc] initWithAList:aList aSet:aSet aMap:aMap subRequests:subRequests hasDefault:hasDefault requiredField:requiredField constructionRequiredField:constructionRequiredField];
    if (error) {
        NSArray *invalidFields = [instance validateNonOptionalFields];
        if (invalidFields.count > 0) {
            NSString *errorDescription = [NSString stringWithFormat:@"Required fields not set: %@", invalidFields];
            *error = [NSError errorWithDomain:@"com.twitter.scrooge.backend.CocoaGenerator" code:0 userInfo:@{NSLocalizedDescriptionKey: errorDescription}];
        }
    }
    return instance;
}

- (instancetype)initWithCoder:(NSCoder*)decoder
{
    if (self = [super init]) {
        if ([decoder containsValueForKey:@"1"]) {
            [self setAList:(NSArray *)[decoder decodeObjectForKey:@"1"]];
        }
        if ([decoder containsValueForKey:@"2"]) {
            [self setASet:(NSSet *)[decoder decodeObjectForKey:@"2"]];
        }
        if ([decoder containsValueForKey:@"3"]) {
            [self setAMap:(NSDictionary *)[decoder decodeObjectForKey:@"3"]];
        }
        if ([decoder containsValueForKey:@"4"]) {
            [self setARequest:(TFNTwitterThriftGoldRequest*)[decoder decodeObjectForKey:@"4"]];
        }
        if ([decoder containsValueForKey:@"5"]) {
            [self setSubRequests:(NSArray *)[decoder decodeObjectForKey:@"5"]];
        }
        if ([decoder containsValueForKey:@"6"]) {
            [self setHasDefault:(NSString *)[decoder decodeObjectForKey:@"6"]];
        }
        if ([decoder containsValueForKey:@"7"]) {
            [self setNoComment:(int64_t)[decoder decodeInt64ForKey:@"7"]];
        }
        if ([decoder containsValueForKey:@"8"]) {
            [self setDoubleSlashComment:(int64_t)[decoder decodeInt64ForKey:@"8"]];
        }
        if ([decoder containsValueForKey:@"9"]) {
            [self setHashtagComment:(int64_t)[decoder decodeInt64ForKey:@"9"]];
        }
        if ([decoder containsValueForKey:@"10"]) {
            [self setSingleAsteriskComment:(int64_t)[decoder decodeInt64ForKey:@"10"]];
        }
        if ([decoder containsValueForKey:@"11"]) {
            [self setDocStringComment:(int64_t)[decoder decodeInt64ForKey:@"11"]];
        }
        if ([decoder containsValueForKey:@"12"]) {
            [self setRecRequest:(TFNTwitterThriftGoldRecursive*)[decoder decodeObjectForKey:@"12"]];
        }
        if ([decoder containsValueForKey:@"13"]) {
            [self setRequiredField:(NSString *)[decoder decodeObjectForKey:@"13"]];
        }
        if ([decoder containsValueForKey:@"14"]) {
            [self setConstructionRequiredField:(int64_t)[decoder decodeInt64ForKey:@"14"]];
        }
        if ([decoder containsValueForKey:@"15"]) {
            [self setAnInt8:(int8_t)[decoder decodeInt32ForKey:@"15"]];
        }
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder*)encoder
{
    if (_aListIsSet) {
        [encoder encodeObject:_aList forKey:@"1"];
    }
    if (_aSetIsSet) {
        [encoder encodeObject:_aSet forKey:@"2"];
    }
    if (_aMapIsSet) {
        [encoder encodeObject:_aMap forKey:@"3"];
    }
    if (_aRequestIsSet) {
        [encoder encodeObject:_aRequest forKey:@"4"];
    }
    if (_subRequestsIsSet) {
        [encoder encodeObject:_subRequests forKey:@"5"];
    }
    if (_hasDefaultIsSet) {
        [encoder encodeObject:_hasDefault forKey:@"6"];
    }
    if (_noCommentIsSet) {
        [encoder encodeInt64:_noComment forKey:@"7"];
    }
    if (_doubleSlashCommentIsSet) {
        [encoder encodeInt64:_doubleSlashComment forKey:@"8"];
    }
    if (_hashtagCommentIsSet) {
        [encoder encodeInt64:_hashtagComment forKey:@"9"];
    }
    if (_singleAsteriskCommentIsSet) {
        [encoder encodeInt64:_singleAsteriskComment forKey:@"10"];
    }
    if (_docStringCommentIsSet) {
        [encoder encodeInt64:_docStringComment forKey:@"11"];
    }
    if (_recRequestIsSet) {
        [encoder encodeObject:_recRequest forKey:@"12"];
    }
    if (_requiredFieldIsSet) {
        [encoder encodeObject:_requiredField forKey:@"13"];
    }
    if (_constructionRequiredFieldIsSet) {
        [encoder encodeInt64:_constructionRequiredField forKey:@"14"];
    }
    if (_anInt8IsSet) {
        [encoder encodeInt32:_anInt8 forKey:@"15"];
    }
}

- (void)setAList:(NSArray *)aList
{
    _aList = [aList copy];
    _aListIsSet = aList != nil;
}

- (void)setASet:(NSSet *)aSet
{
    _aSet = [aSet copy];
    _aSetIsSet = aSet != nil;
}

- (void)setAMap:(NSDictionary *)aMap
{
    _aMap = [aMap copy];
    _aMapIsSet = aMap != nil;
}

- (void)setARequest:(TFNTwitterThriftGoldRequest *)aRequest
{
    _aRequest = aRequest;
    _aRequestIsSet = aRequest != nil;
}

- (void)setSubRequests:(NSArray *)subRequests
{
    _subRequests = [subRequests copy];
    _subRequestsIsSet = subRequests != nil;
}

- (void)setHasDefault:(NSString *)hasDefault
{
    _hasDefault = [hasDefault copy];
    _hasDefaultIsSet = hasDefault != nil;
}

- (void)setNoComment:(int64_t)noComment
{
    _noComment = noComment;
    _noCommentIsSet = YES;
}

- (void)setDoubleSlashComment:(int64_t)doubleSlashComment
{
    _doubleSlashComment = doubleSlashComment;
    _doubleSlashCommentIsSet = YES;
}

- (void)setHashtagComment:(int64_t)hashtagComment
{
    _hashtagComment = hashtagComment;
    _hashtagCommentIsSet = YES;
}

- (void)setSingleAsteriskComment:(int64_t)singleAsteriskComment
{
    _singleAsteriskComment = singleAsteriskComment;
    _singleAsteriskCommentIsSet = YES;
}

- (void)setDocStringComment:(int64_t)docStringComment
{
    _docStringComment = docStringComment;
    _docStringCommentIsSet = YES;
}

- (void)setRecRequest:(TFNTwitterThriftGoldRecursive *)recRequest
{
    _recRequest = recRequest;
    _recRequestIsSet = recRequest != nil;
}

- (void)setRequiredField:(NSString *)requiredField
{
    _requiredField = [requiredField copy];
    _requiredFieldIsSet = requiredField != nil;
}

- (void)setConstructionRequiredField:(int64_t)constructionRequiredField
{
    _constructionRequiredField = constructionRequiredField;
    _constructionRequiredFieldIsSet = YES;
}

- (void)setAnInt8:(int8_t)anInt8
{
    _anInt8 = anInt8;
    _anInt8IsSet = YES;
}

- (void)read:(id <TProtocol>)inProtocol
{
    NSString* fieldName;
    int fieldType;
    int fieldID;

    [inProtocol readStructBeginReturningName:nil];
    while (true) {
        [inProtocol readFieldBeginReturningName:&fieldName type:&fieldType fieldID:&fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID) {
            case 1:
                if (fieldType == TType_LIST) {
                    NSArray * aList_item;
                    int _aList_item_size;
                    [inProtocol readListBeginReturningElementType:NULL size:&_aList_item_size];
                    NSUInteger _aList_item_capacity = _aList_item_size < 0 ? 0 : (NSUInteger)_aList_item_size;
                    NSMutableArray *aList_item_mutable = [[NSMutableArray alloc] initWithCapacity:_aList_item_capacity];
                    for (int _aList_item_i = 0; _aList_item_i < _aList_item_size; ++_aList_item_i) {
                        NSString * aList_item_element;
                        aList_item_element = [inProtocol readString];
                        [aList_item_mutable addObject: aList_item_element];
                    }
                    aList_item = aList_item_mutable;
                    [inProtocol readListEnd];
                    [self setAList:aList_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_SET) {
                    NSSet * aSet_item;
                    int _aSet_item_size;
                    [inProtocol readSetBeginReturningElementType: NULL size: &_aSet_item_size];
                    NSUInteger _aSet_item_capacity= _aSet_item_size < 0 ? 0 : (NSUInteger)_aSet_item_size;
                    NSMutableSet *aSet_item_mutable = [[NSMutableSet alloc] initWithCapacity:_aSet_item_capacity];
                    for (int _aSet_item_i = 0; _aSet_item_i < _aSet_item_size; ++_aSet_item_i) {
                        int32_t aSet_item_element;
                        aSet_item_element = [inProtocol readI32];
                        [aSet_item_mutable addObject: aSet_item_element];
                    }
                    aSet_item = aSet_item_mutable;
                    [inProtocol readSetEnd];
                    [self setASet:aSet_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_MAP) {
                    NSDictionary * aMap_item;
                    int _aMap_item_size;
                    [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_aMap_item_size];
                    NSUInteger _aMap_item_capacity= _aMap_item_size < 0 ? 0 : (NSUInteger)_aMap_item_size;
                    NSMutableDictionary *aMap_item_mutable = [[NSMutableDictionary alloc] initWithCapacity: _aMap_item_capacity];
                    for (int _aMap_item_i = 0; _aMap_item_i < _aMap_item_size; ++_aMap_item_i) {
                        int64_t aMap_item_key;
                        int64_t aMap_item_value;
                        aMap_item_key = [inProtocol readI64];
                        aMap_item_value = [inProtocol readI64];
                        [aMap_item_mutable setObject:aMap_item_value forKey:@(aMap_item_key)];
                    }
                    aMap_item = aMap_item_mutable;
                    [inProtocol readMapEnd];
                    [self setAMap:aMap_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_STRUCT) {
                    TFNTwitterThriftGoldRequest* aRequest_item;
                    aRequest_item = [[TFNTwitterThriftGoldRequest alloc] init];
                    [aRequest_item read:inProtocol];
                    [self setARequest:aRequest_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_LIST) {
                    NSArray * subRequests_item;
                    int _subRequests_item_size;
                    [inProtocol readListBeginReturningElementType:NULL size:&_subRequests_item_size];
                    NSUInteger _subRequests_item_capacity = _subRequests_item_size < 0 ? 0 : (NSUInteger)_subRequests_item_size;
                    NSMutableArray *subRequests_item_mutable = [[NSMutableArray alloc] initWithCapacity:_subRequests_item_capacity];
                    for (int _subRequests_item_i = 0; _subRequests_item_i < _subRequests_item_size; ++_subRequests_item_i) {
                        TFNTwitterThriftGoldRequest * subRequests_item_element;
                        subRequests_item_element = [[TFNTwitterThriftGoldRequest alloc] init];
                        [subRequests_item_element read:inProtocol];
                        [subRequests_item_mutable addObject: subRequests_item_element];
                    }
                    subRequests_item = subRequests_item_mutable;
                    [inProtocol readListEnd];
                    [self setSubRequests:subRequests_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 6:
                if (fieldType == TType_STRING) {
                    NSString * hasDefault_item;
                    hasDefault_item = [inProtocol readString];
                    [self setHasDefault:hasDefault_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 7:
                if (fieldType == TType_I64) {
                    int64_t noComment_item;
                    noComment_item = [inProtocol readI64];
                    [self setNoComment:noComment_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 8:
                if (fieldType == TType_I64) {
                    int64_t doubleSlashComment_item;
                    doubleSlashComment_item = [inProtocol readI64];
                    [self setDoubleSlashComment:doubleSlashComment_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 9:
                if (fieldType == TType_I64) {
                    int64_t hashtagComment_item;
                    hashtagComment_item = [inProtocol readI64];
                    [self setHashtagComment:hashtagComment_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 10:
                if (fieldType == TType_I64) {
                    int64_t singleAsteriskComment_item;
                    singleAsteriskComment_item = [inProtocol readI64];
                    [self setSingleAsteriskComment:singleAsteriskComment_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 11:
                if (fieldType == TType_I64) {
                    int64_t docStringComment_item;
                    docStringComment_item = [inProtocol readI64];
                    [self setDocStringComment:docStringComment_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 12:
                if (fieldType == TType_STRUCT) {
                    TFNTwitterThriftGoldRecursive* recRequest_item;
                    recRequest_item = [[TFNTwitterThriftGoldRecursive alloc] init];
                    [recRequest_item read:inProtocol];
                    [self setRecRequest:recRequest_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 13:
                if (fieldType == TType_STRING) {
                    NSString * requiredField_item;
                    requiredField_item = [inProtocol readString];
                    [self setRequiredField:requiredField_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 14:
                if (fieldType == TType_I64) {
                    int64_t constructionRequiredField_item;
                    constructionRequiredField_item = [inProtocol readI64];
                    [self setConstructionRequiredField:constructionRequiredField_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
            case 15:
                if (fieldType == TType_BYTE) {
                    int8_t anInt8_item;
                    anInt8_item = [inProtocol readByte];
                    [self setAnInt8:anInt8_item];
                } else {
                    NSLog(@"%s: field ID %i has unexpected type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
                    [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
                }
                break;
        default:
            NSLog(@"%s: unexpected field ID %i with type %i.  Skipping.", __PRETTY_FUNCTION__, fieldID, fieldType);
            [TProtocolUtil skipType:fieldType onProtocol:inProtocol];
            break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
    [self validate];
}

- (void)write:(id <TProtocol>)outProtocol
{
    [self validate];
    [outProtocol writeStructBeginWithName:@"TFNTwitterThriftGoldRequest"];
    if (_aListIsSet) {
        [outProtocol writeFieldBeginWithName:@"aList" type:TType_LIST fieldID:1];
        NSArray * aList_item = _aList;
        [outProtocol writeListBeginWithElementType:TType_STRING size:(int)[aList_item count]];
        for (NSUInteger _aList_item_i = 0; _aList_item_i < [aList_item count]; _aList_item_i++) {
            NSString * aList_item_element = aList_item[_aList_item_i];
            [outProtocol writeString:aList_item_element];
        }
        [outProtocol writeListEnd];
        [outProtocol writeFieldEnd];
    }
    if (_aSetIsSet) {
        [outProtocol writeFieldBeginWithName:@"aSet" type:TType_SET fieldID:2];
        NSSet * aSet_item = _aSet;
        [outProtocol writeSetBeginWithElementType:TType_I32 size:(int)[aSet_item count]];
        for (id aSet_item_element in aSet_item) {
            [outProtocol writeI32:aSet_item_element];
        }
        [outProtocol writeSetEnd];
        [outProtocol writeFieldEnd];
    }
    if (_aMapIsSet) {
        [outProtocol writeFieldBeginWithName:@"aMap" type:TType_MAP fieldID:3];
        NSDictionary * aMap_item = _aMap;
        [outProtocol writeMapBeginWithKeyType: TType_I64 valueType: TType_I64 size: (int)[aMap_item count]];
        for (id aMap_item_key_id in aMap_item) {
            int64_t aMap_item_key;
            int64_t aMap_item_value;
            id aMap_item_value_id = [aMap_item objectForKey:aMap_item_key_id];
            aMap_item_key = [aMap_item_key_id longLongValue];
            aMap_item_value = [aMap_item_value_id longLongValue];
            [outProtocol writeI64:aMap_item_key];
            [outProtocol writeI64:aMap_item_value];
        }
        [outProtocol writeMapEnd];
        [outProtocol writeFieldEnd];
    }
    if (_aRequestIsSet) {
        [outProtocol writeFieldBeginWithName:@"aRequest" type:TType_STRUCT fieldID:4];
        TFNTwitterThriftGoldRequest* aRequest_item = _aRequest;
        [aRequest_item write: outProtocol];
        [outProtocol writeFieldEnd];
    }
    if (_subRequestsIsSet) {
        [outProtocol writeFieldBeginWithName:@"subRequests" type:TType_LIST fieldID:5];
        NSArray * subRequests_item = _subRequests;
        [outProtocol writeListBeginWithElementType:TType_STRUCT size:(int)[subRequests_item count]];
        for (NSUInteger _subRequests_item_i = 0; _subRequests_item_i < [subRequests_item count]; _subRequests_item_i++) {
            TFNTwitterThriftGoldRequest * subRequests_item_element = subRequests_item[_subRequests_item_i];
            [subRequests_item_element write: outProtocol];
        }
        [outProtocol writeListEnd];
        [outProtocol writeFieldEnd];
    }
    if (_hasDefaultIsSet) {
        [outProtocol writeFieldBeginWithName:@"hasDefault" type:TType_STRING fieldID:6];
        NSString * hasDefault_item = _hasDefault;
        [outProtocol writeString:hasDefault_item];
        [outProtocol writeFieldEnd];
    }
    if (_noCommentIsSet) {
        [outProtocol writeFieldBeginWithName:@"noComment" type:TType_I64 fieldID:7];
        int64_t noComment_item = _noComment;
        [outProtocol writeI64:noComment_item];
        [outProtocol writeFieldEnd];
    }
    if (_doubleSlashCommentIsSet) {
        [outProtocol writeFieldBeginWithName:@"doubleSlashComment" type:TType_I64 fieldID:8];
        int64_t doubleSlashComment_item = _doubleSlashComment;
        [outProtocol writeI64:doubleSlashComment_item];
        [outProtocol writeFieldEnd];
    }
    if (_hashtagCommentIsSet) {
        [outProtocol writeFieldBeginWithName:@"hashtagComment" type:TType_I64 fieldID:9];
        int64_t hashtagComment_item = _hashtagComment;
        [outProtocol writeI64:hashtagComment_item];
        [outProtocol writeFieldEnd];
    }
    if (_singleAsteriskCommentIsSet) {
        [outProtocol writeFieldBeginWithName:@"singleAsteriskComment" type:TType_I64 fieldID:10];
        int64_t singleAsteriskComment_item = _singleAsteriskComment;
        [outProtocol writeI64:singleAsteriskComment_item];
        [outProtocol writeFieldEnd];
    }
    if (_docStringCommentIsSet) {
        [outProtocol writeFieldBeginWithName:@"docStringComment" type:TType_I64 fieldID:11];
        int64_t docStringComment_item = _docStringComment;
        [outProtocol writeI64:docStringComment_item];
        [outProtocol writeFieldEnd];
    }
    if (_recRequestIsSet) {
        [outProtocol writeFieldBeginWithName:@"recRequest" type:TType_STRUCT fieldID:12];
        TFNTwitterThriftGoldRecursive* recRequest_item = _recRequest;
        [recRequest_item write: outProtocol];
        [outProtocol writeFieldEnd];
    }
    if (_requiredFieldIsSet) {
        [outProtocol writeFieldBeginWithName:@"requiredField" type:TType_STRING fieldID:13];
        NSString * requiredField_item = _requiredField;
        [outProtocol writeString:requiredField_item];
        [outProtocol writeFieldEnd];
    }
    if (_constructionRequiredFieldIsSet) {
        [outProtocol writeFieldBeginWithName:@"constructionRequiredField" type:TType_I64 fieldID:14];
        int64_t constructionRequiredField_item = _constructionRequiredField;
        [outProtocol writeI64:constructionRequiredField_item];
        [outProtocol writeFieldEnd];
    }
    if (_anInt8IsSet) {
        [outProtocol writeFieldBeginWithName:@"anInt8" type:TType_BYTE fieldID:15];
        int8_t anInt8_item = _anInt8;
        [outProtocol writeByte:anInt8_item];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (void)validate
{
    if (!_requiredFieldIsSet) {
        @throw [TProtocolException exceptionWithName:@"TProtocolException" reason:@"Required field 'requiredField' is not set."];
    }
}

- (NSArray *)validateNonOptionalFields
{
    NSMutableArray *invalidFields = [NSMutableArray array];
    if (!_aListIsSet) {
        [invalidFields addObject:@"aList"];
    }
    if (!_aSetIsSet) {
        [invalidFields addObject:@"aSet"];
    }
    if (!_aMapIsSet) {
        [invalidFields addObject:@"aMap"];
    }
    if (!_subRequestsIsSet) {
        [invalidFields addObject:@"subRequests"];
    }
    if (!_hasDefaultIsSet) {
        [invalidFields addObject:@"hasDefault"];
    }
    if (!_requiredFieldIsSet) {
        [invalidFields addObject:@"requiredField"];
    }
    if (!_constructionRequiredFieldIsSet) {
        [invalidFields addObject:@"constructionRequiredField"];
    }
    return [invalidFields copy];
}

@end
